# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  
  ## Trufflehog secret scan        
  secret_scan:
    name: Secret scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - name: trufflehog-actions-scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: " "
        continue-on-error: true
    
    
## SBOM    
  SBOM:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: python BOM
#         uses: CycloneDX/gh-python-generate-sbom@v1
#         continue-on-error: true
        run: |
          pip install cyclonedx-bom
          cyclonedx-bom -r -o bom.xml
          cat bom.xml
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bom-artifact
          path: bom.xml
          retention-days: 5

 ## Dependecy scan
  dependency-scan:
    name: Dependency scan
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v2
        continue-on-error: true
        
        
        
  ## Python SAST SCAN      
  sast_scan:
    name: Python SAST scan
    runs-on: ubuntu-latest
#     permissions:
#       contents: read # for checkout to fetch code
#       security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
     - uses: jpetrucciani/bandit-check@master

    # specify a path
     - uses: jpetrucciani/bandit-check@master
       with:
        path: '.'

    # provide some flags
     - uses: jpetrucciani/bandit-check@master
       with:
        bandit_flags: '-lll -o sast.json -f json'
     - name: Upload Artifact
       uses: actions/upload-artifact@v3
       with:
           name: sast-artifact
           path: sast.json
           retention-days: 5   
     
        
    
